parpipe.f
	main loop: time step loop
	turbprop function (general): to calculate mut, calls turbprop from each model
	advance_scalar function (enthalpy and general turbModel): advances enthalpy and each turbulent scalar (calls each model)
	advance: advances momentum both in radial (U) and in axial (W) direction
	bound_h: boundary conditions of enthalpy and turbulent scalars
        bound_v: boundary conditions of momentum in radial (U) and in axial (W) direction
	bound_m: sets boundary conditions, for developing calculates the net mass and corrects by addind mass in the outlet.
	fkdat: initialize the flow field
	cmpinf: calculates the bulk and the stress
numerics.f
	Equation of state functions and lookup table: funcNewtonSolve, funcNewtonSolveIG, funcNewtonSolveRG, funcNewtonBC, state, stateIG, stateRG
	fillps: fill the right hand side for the poisson solver
	correc: velocity correction due to pressure
	chkdt: check delta t
	chkdiv: check divergence f the flow
	mkgrid: make the grid
	readOldGrid
	diffc: diffusion term of the scalars in the z-direction, set explicit
	diffu: diffusion term of radial velocity (U): in cylindrical coordinates d\dz[mu (2 dW/dz - 2/3 Nabla . Vel )] + 1/r [d/dr r mu (dU/dz)]
	diffw: diffusion term of axial velocity (W): in cylindrical coordinates  d\dz[mu ( dW/dr + dU/dz)] - 1/r [d/dr r mu 2/3* Nabla . Velocity] - 1/r mu (U/r - 1/3 Nable . Velocity)
	advecc: advection term of the scalars in both directions: r and z
	advecu: advection term of the radial velocity (U): for cylindrical d(rho U W)/dz + 1/r d(r rho U^2)/dr
	advecw: advection term of the axial velocity (W) : for cylincrical d(rho W^2)/dz + 1/r d(r rho U W)/dr



How to solve incompressible NS (SIMPLE algorithm): https://www.youtube.com/watch?v=OOILoJ1zuiw	
